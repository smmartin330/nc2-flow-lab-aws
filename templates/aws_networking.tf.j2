# VARIABLES

variable "vpc_region" {
  description = "Region for VPC"
  type        = string
  default     = "{{ vpc_region }}"
}

variable "vpc_cidr" {
  description = "CIDR block for VPC"
  type        = string
  default     = "{{ vpc_cidr }}"
}

variable "vpc_az" {
  description = "Availability zone for VPC"
  type        = string
  default     = "{{ vpc_az }}"
} 

# VPC & SHARED OBJECTS

# VPC
resource "aws_vpc" "vpc" {
  region               = "{{ vpc_region }}"
  cidr_block           = "{{ vpc_cidr }}"
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Name = "{{ project }}-vpc"
  }
}

# Default route table
resource "aws_default_route_table" "vpc_default_rt" {
  default_route_table_id = aws_vpc.vpc.default_route_table_id

  tags = {
    Name = "{{ project }}-vpc-default-rt"
  }
}

# Public Route Table
resource "aws_route_table" "public_rt" {
  vpc_id = aws_vpc.vpc.id

  tags = {
    Name = "{{ project }}-public-rt"
  }
}

# Internet Gateway
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.vpc.id

  tags = {
    Name = "{{ project }}-igw"
  }
}

# Elastic IP for NAT Gateway
resource "aws_eip" "nat_eip" {
  domain = "vpc"

  tags = {
    Name = "{{ project }}-nat-eip"
  }
}

# NAT Gateway
resource "aws_nat_gateway" "nat_gw" {
  allocation_id = aws_eip.nat_eip.id
  subnet_id     = aws_subnet.public_subnet.id

  tags = {
    Name = "{{ project }}-nat-gw"
  }

  depends_on = [aws_internet_gateway.igw]
}

# Public Subnet Route Table Association
resource "aws_route_table_association" "public_rt_assoc" {
  subnet_id      = aws_subnet.public_subnet.id
  route_table_id = aws_route_table.public_rt.id
}

# Public Subnet Route
resource "aws_route" "public_internet_route" {
  route_table_id         = aws_route_table.public_rt.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.igw.id
}

# Private Subnet Routes
resource "aws_route" "private_nat_route" {
  route_table_id         = aws_vpc.vpc.default_route_table_id
  destination_cidr_block = "0.0.0.0/0"
  nat_gateway_id         = aws_nat_gateway.nat_gw.id
} 

# Public Subnet
resource "aws_subnet" "public_subnet" {
  vpc_id                  = aws_vpc.vpc.id
  cidr_block              = cidrsubnet("{{ vpc_cidr }}", 8, 0)
  availability_zone       = var.vpc_az
  map_public_ip_on_launch = true

  tags = {
    Name = "{{ project }}-public-subnet"
  }
}

# Shared Private Subnets
# Cluster Management Subnet
resource "aws_subnet" "private_metal_subnet" {
  vpc_id            = aws_vpc.vpc.id
  cidr_block        = cidrsubnet("{{ vpc_cidr }}", 8, 1)
  availability_zone = var.vpc_az

  tags = {
    Name = "{{ project }}-private-metal-subnet"
  }
}


# Per-Cluster PC & Flow Subnets
{% for i in range(0,cluster_count) %}
resource "aws_subnet" "private_pc_subnet_{{ i }}" {
  vpc_id            = aws_vpc.vpc.id
  cidr_block        = cidrsubnet("{{ vpc_cidr }}", 8, {{ 10 + i }})
  availability_zone = var.vpc_az

  tags = {
    Name = "{{ project }}-{{ i }}-private-pc-subnet_{{ i }}"
  }
}

resource "aws_subnet" "private_flow_subnet_{{ i }}" {
  vpc_id            = aws_vpc.vpc.id
  cidr_block        = cidrsubnet("{{ vpc_cidr }}", 8, {{ 20 + i }})
  availability_zone = var.vpc_az

  tags = {
    Name = "{{ project }}-{{ i }}-private-flow-subnet"
  }
} 

{% endfor %}

resource "aws_security_group" "{{ project }}-nlb-sg" {
  name        = "{{ project }}-nlb-sg"
  description = "Allow inbound access to Prism Centrals"
  vpc_id      = aws_vpc.vpc.id

  tags = {
    Name = "{{ project }}-nlb-sg"
  }
}

{% for i in range(0,access_ips|length) %}
resource "aws_vpc_security_group_ingress_rule" "{{ project }}-nlb-inbound_{{ i }}" {
  security_group_id = aws_security_group.{{ project }}-nlb-sg.id
  cidr_ipv4       = "{{ access_ips[i] }}"
  from_port         = 9440
  ip_protocol       = "tcp"
  to_port           = {{ 9440 + cluster_count - 1 }}
}
{% endfor %}

resource "aws_vpc_security_group_egress_rule" "{{ project }}-nlb-outbound" {
  security_group_id = aws_security_group.{{ project }}-nlb-sg.id
  cidr_ipv4         = "0.0.0.0/0"
  ip_protocol       = "-1" # semantically equivalent to all ports
}

resource "aws_lb" "{{ project }}-nlb" {
  name               = "{{ project }}-nlb"
  internal           = false
  load_balancer_type = "network"
  subnets            = [ aws_subnet.public_subnet.id ]
  security_groups    = [ aws_security_group.{{ project }}-nlb-sg.id ]

  tags = {
    Name = "{{ project }}-nlb"
  }
}